{"ast":null,"code":"import { makeAutoObservable } from \"mobx\";\nclass CanvasState {\n  constructor() {\n    this.canvas = null;\n    this.socket = null;\n    this.sessionId = null;\n    this.undoList = [];\n    this.redoList = [];\n    this.username = \"\";\n    makeAutoObservable(this);\n  }\n  setSocket(socket) {\n    this.socket = socket;\n  }\n  setSessionId(sessionId) {\n    this.sessionId = sessionId;\n  }\n  setUsername(username) {\n    this.username = username;\n  }\n  setCanvas(canvas) {\n    this.canvas = canvas;\n  }\n  pushToUndo(data) {\n    this.undoList.push(data);\n  }\n  pushToRedo(data) {\n    this.redoList.push(data);\n  }\n  undo() {\n    let ctx = this.canvas.getContext('2d');\n    if (this.undoList.length > 0) {\n      let dataUrl = this.undoList.pop();\n      this.redoList.push(this.canvas.toDataURL());\n      let img = new Image();\n      img.src = dataUrl;\n      img.onload = () => {\n        ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n        ctx.drawImage(img, 0, 0, this.canvas.width, this.canvas.height);\n      };\n    } else {\n      ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    }\n  }\n  redo() {\n    let ctx = this.canvas.getContext('2d');\n    if (this.redoList.length > 0) {\n      let dataUrl = this.redoList.pop();\n      this.undoList.push(this.canvas.toDataURL());\n      let img = new Image();\n      img.src = dataUrl;\n      img.onload = () => {\n        ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n        ctx.drawImage(img, 0, 0, this.canvas.width, this.canvas.height);\n      };\n    }\n  }\n}\nexport default new CanvasState();","map":{"version":3,"names":["makeAutoObservable","CanvasState","constructor","canvas","socket","sessionId","undoList","redoList","username","setSocket","setSessionId","setUsername","setCanvas","pushToUndo","data","push","pushToRedo","undo","ctx","getContext","length","dataUrl","pop","toDataURL","img","Image","src","onload","clearRect","width","height","drawImage","redo"],"sources":["/Users/Elena/Documents/ReactPaintApp/react-paint-app/client/src/store/canvasState.js"],"sourcesContent":["import {makeAutoObservable} from \"mobx\";\n\nclass CanvasState {\n    canvas = null;\n    socket = null;\n    sessionId = null;\n    undoList = [];\n    redoList = [];\n    username = \"\";\n\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    setSocket(socket) {\n        this.socket = socket;\n    }\n\n    setSessionId(sessionId) {\n        this.sessionId = sessionId;\n    }\n\n    setUsername(username) {\n        this.username = username;\n    }\n\n    setCanvas(canvas) {\n        this.canvas = canvas;\n    }\n\n    pushToUndo(data) {\n        this.undoList.push(data);\n    }\n\n    pushToRedo(data) {\n        this.redoList.push(data);\n    }\n\n    undo() {\n        let ctx = this.canvas.getContext('2d');\n        if (this.undoList.length > 0) {\n            let dataUrl = this.undoList.pop();\n            this.redoList.push(this.canvas.toDataURL());\n            let img = new Image();\n            img.src = dataUrl;\n            img.onload = () => {\n                ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n                ctx.drawImage(img, 0, 0, this.canvas.width, this.canvas.height);\n            };\n        } else {\n            ctx.clearRect(0,0, this.canvas.width, this.canvas.height);\n        }\n    }\n\n    redo() {\n        let ctx = this.canvas.getContext('2d');\n        if (this.redoList.length > 0) {\n            let dataUrl = this.redoList.pop();\n            this.undoList.push(this.canvas.toDataURL());\n            let img = new Image();\n            img.src = dataUrl;\n            img.onload = () => {\n                ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n                ctx.drawImage(img, 0, 0, this.canvas.width, this.canvas.height);\n            };\n        }\n    }\n}\n\nexport default new CanvasState();"],"mappings":"AAAA,SAAQA,kBAAkB,QAAO,MAAM;AAEvC,MAAMC,WAAW,CAAC;EAQdC,WAAW,GAAG;IAAA,KAPdC,MAAM,GAAG,IAAI;IAAA,KACbC,MAAM,GAAG,IAAI;IAAA,KACbC,SAAS,GAAG,IAAI;IAAA,KAChBC,QAAQ,GAAG,EAAE;IAAA,KACbC,QAAQ,GAAG,EAAE;IAAA,KACbC,QAAQ,GAAG,EAAE;IAGTR,kBAAkB,CAAC,IAAI,CAAC;EAC5B;EAEAS,SAAS,CAACL,MAAM,EAAE;IACd,IAAI,CAACA,MAAM,GAAGA,MAAM;EACxB;EAEAM,YAAY,CAACL,SAAS,EAAE;IACpB,IAAI,CAACA,SAAS,GAAGA,SAAS;EAC9B;EAEAM,WAAW,CAACH,QAAQ,EAAE;IAClB,IAAI,CAACA,QAAQ,GAAGA,QAAQ;EAC5B;EAEAI,SAAS,CAACT,MAAM,EAAE;IACd,IAAI,CAACA,MAAM,GAAGA,MAAM;EACxB;EAEAU,UAAU,CAACC,IAAI,EAAE;IACb,IAAI,CAACR,QAAQ,CAACS,IAAI,CAACD,IAAI,CAAC;EAC5B;EAEAE,UAAU,CAACF,IAAI,EAAE;IACb,IAAI,CAACP,QAAQ,CAACQ,IAAI,CAACD,IAAI,CAAC;EAC5B;EAEAG,IAAI,GAAG;IACH,IAAIC,GAAG,GAAG,IAAI,CAACf,MAAM,CAACgB,UAAU,CAAC,IAAI,CAAC;IACtC,IAAI,IAAI,CAACb,QAAQ,CAACc,MAAM,GAAG,CAAC,EAAE;MAC1B,IAAIC,OAAO,GAAG,IAAI,CAACf,QAAQ,CAACgB,GAAG,EAAE;MACjC,IAAI,CAACf,QAAQ,CAACQ,IAAI,CAAC,IAAI,CAACZ,MAAM,CAACoB,SAAS,EAAE,CAAC;MAC3C,IAAIC,GAAG,GAAG,IAAIC,KAAK,EAAE;MACrBD,GAAG,CAACE,GAAG,GAAGL,OAAO;MACjBG,GAAG,CAACG,MAAM,GAAG,MAAM;QACfT,GAAG,CAACU,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAACzB,MAAM,CAAC0B,KAAK,EAAE,IAAI,CAAC1B,MAAM,CAAC2B,MAAM,CAAC;QAC1DZ,GAAG,CAACa,SAAS,CAACP,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,IAAI,CAACrB,MAAM,CAAC0B,KAAK,EAAE,IAAI,CAAC1B,MAAM,CAAC2B,MAAM,CAAC;MACnE,CAAC;IACL,CAAC,MAAM;MACHZ,GAAG,CAACU,SAAS,CAAC,CAAC,EAAC,CAAC,EAAE,IAAI,CAACzB,MAAM,CAAC0B,KAAK,EAAE,IAAI,CAAC1B,MAAM,CAAC2B,MAAM,CAAC;IAC7D;EACJ;EAEAE,IAAI,GAAG;IACH,IAAId,GAAG,GAAG,IAAI,CAACf,MAAM,CAACgB,UAAU,CAAC,IAAI,CAAC;IACtC,IAAI,IAAI,CAACZ,QAAQ,CAACa,MAAM,GAAG,CAAC,EAAE;MAC1B,IAAIC,OAAO,GAAG,IAAI,CAACd,QAAQ,CAACe,GAAG,EAAE;MACjC,IAAI,CAAChB,QAAQ,CAACS,IAAI,CAAC,IAAI,CAACZ,MAAM,CAACoB,SAAS,EAAE,CAAC;MAC3C,IAAIC,GAAG,GAAG,IAAIC,KAAK,EAAE;MACrBD,GAAG,CAACE,GAAG,GAAGL,OAAO;MACjBG,GAAG,CAACG,MAAM,GAAG,MAAM;QACfT,GAAG,CAACU,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAACzB,MAAM,CAAC0B,KAAK,EAAE,IAAI,CAAC1B,MAAM,CAAC2B,MAAM,CAAC;QAC1DZ,GAAG,CAACa,SAAS,CAACP,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,IAAI,CAACrB,MAAM,CAAC0B,KAAK,EAAE,IAAI,CAAC1B,MAAM,CAAC2B,MAAM,CAAC;MACnE,CAAC;IACL;EACJ;AACJ;AAEA,eAAe,IAAI7B,WAAW,EAAE"},"metadata":{},"sourceType":"module","externalDependencies":[]}