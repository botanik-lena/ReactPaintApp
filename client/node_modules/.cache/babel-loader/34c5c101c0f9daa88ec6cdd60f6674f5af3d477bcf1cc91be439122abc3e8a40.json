{"ast":null,"code":"import Tool from \"./Tool\";\nexport default class Rect extends Tool {\n  constructor(canvas, socket, id) {\n    super(canvas, socket, id);\n    this.listen();\n  }\n  listen() {\n    this.canvas.onmouseup = this.mouseUpHandler.bind(this);\n    this.canvas.onmousedown = this.mouseDownHandler.bind(this);\n    this.canvas.onmousemove = this.mouseMoveHandler.bind(this);\n  }\n  mouseUpHandler(e) {\n    this.mouseDown = false;\n    this.socket.send(JSON.stringify({\n      method: \"draw\",\n      id: this.id,\n      figure: {\n        type: 'rect',\n        x: this.startX,\n        y: this.startY,\n        width: this.width,\n        height: this.height\n      }\n    }));\n  }\n  mouseDownHandler(e) {\n    this.mouseDown = true;\n    this.ctx.beginPath();\n    this.startX = e.pageX - e.target.offsetLeft;\n    this.startY = e.pageY - e.target.offsetTop;\n    this.saved = this.canvas.toDataURL();\n  }\n  mouseMoveHandler(e) {\n    if (this.mouseDown) {\n      let currentX = e.pageX - e.target.offsetLeft;\n      let currentY = e.pageY - e.target.offsetTop;\n      this.width = currentX - this.startX;\n      this.height = currentY - this.startY;\n      this.draw(this.startX, this.startY, this.width, this.height);\n    }\n  }\n  static staticDraw(ctx, x, y, width, height) {\n    // const img = new Image();\n    // img.src = this.saved;\n    // img.onload = () => {\n    //     ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    //     ctx.drawImage(img, 0, 0, this.canvas.width, this.canvas.height);\n    ctx.beginPath();\n    ctx.rect(x, y, width, height);\n    ctx.fill();\n    ctx.stroke();\n    // }\n  }\n}","map":{"version":3,"names":["Tool","Rect","constructor","canvas","socket","id","listen","onmouseup","mouseUpHandler","bind","onmousedown","mouseDownHandler","onmousemove","mouseMoveHandler","e","mouseDown","send","JSON","stringify","method","figure","type","x","startX","y","startY","width","height","ctx","beginPath","pageX","target","offsetLeft","pageY","offsetTop","saved","toDataURL","currentX","currentY","draw","staticDraw","rect","fill","stroke"],"sources":["/Users/Elena/Documents/ReactPaintApp/react-paint-app/client/src/tools/Rect.js"],"sourcesContent":["import Tool from \"./Tool\";\n\nexport default class Rect extends Tool {\n    constructor(canvas, socket, id) {\n        super(canvas, socket, id);\n        this.listen();\n    }\n\n    listen() {\n        this.canvas.onmouseup = this.mouseUpHandler.bind(this);\n        this.canvas.onmousedown = this.mouseDownHandler.bind(this);\n        this.canvas.onmousemove = this.mouseMoveHandler.bind(this);\n    }\n\n    mouseUpHandler(e) {\n        this.mouseDown = false;\n        this.socket.send(JSON.stringify({\n            method: \"draw\",\n            id: this.id,\n            figure: {\n                type: 'rect',\n                x: this.startX,\n                y: this.startY,\n                width: this.width,\n                height: this.height\n            }\n        }))\n    }\n\n    mouseDownHandler(e) {\n        this.mouseDown = true;\n        this.ctx.beginPath();\n        this.startX = e.pageX - e.target.offsetLeft;\n        this.startY = e.pageY - e.target.offsetTop;\n        this.saved = this.canvas.toDataURL();\n    }\n\n    mouseMoveHandler(e) {\n        if (this.mouseDown) {\n            let currentX = e.pageX - e.target.offsetLeft;\n            let currentY = e.pageY - e.target.offsetTop;\n            this.width = currentX - this.startX;\n            this.height = currentY - this.startY;\n            this.draw(this.startX, this.startY, this.width, this.height);\n        }\n    }\n\n    static staticDraw(ctx, x, y, width, height) {\n        // const img = new Image();\n        // img.src = this.saved;\n        // img.onload = () => {\n        //     ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n        //     ctx.drawImage(img, 0, 0, this.canvas.width, this.canvas.height);\n            ctx.beginPath();\n            ctx.rect(x, y, width, height);\n            ctx.fill();\n            ctx.stroke();\n        // }\n    }\n}"],"mappings":"AAAA,OAAOA,IAAI,MAAM,QAAQ;AAEzB,eAAe,MAAMC,IAAI,SAASD,IAAI,CAAC;EACnCE,WAAW,CAACC,MAAM,EAAEC,MAAM,EAAEC,EAAE,EAAE;IAC5B,KAAK,CAACF,MAAM,EAAEC,MAAM,EAAEC,EAAE,CAAC;IACzB,IAAI,CAACC,MAAM,EAAE;EACjB;EAEAA,MAAM,GAAG;IACL,IAAI,CAACH,MAAM,CAACI,SAAS,GAAG,IAAI,CAACC,cAAc,CAACC,IAAI,CAAC,IAAI,CAAC;IACtD,IAAI,CAACN,MAAM,CAACO,WAAW,GAAG,IAAI,CAACC,gBAAgB,CAACF,IAAI,CAAC,IAAI,CAAC;IAC1D,IAAI,CAACN,MAAM,CAACS,WAAW,GAAG,IAAI,CAACC,gBAAgB,CAACJ,IAAI,CAAC,IAAI,CAAC;EAC9D;EAEAD,cAAc,CAACM,CAAC,EAAE;IACd,IAAI,CAACC,SAAS,GAAG,KAAK;IACtB,IAAI,CAACX,MAAM,CAACY,IAAI,CAACC,IAAI,CAACC,SAAS,CAAC;MAC5BC,MAAM,EAAE,MAAM;MACdd,EAAE,EAAE,IAAI,CAACA,EAAE;MACXe,MAAM,EAAE;QACJC,IAAI,EAAE,MAAM;QACZC,CAAC,EAAE,IAAI,CAACC,MAAM;QACdC,CAAC,EAAE,IAAI,CAACC,MAAM;QACdC,KAAK,EAAE,IAAI,CAACA,KAAK;QACjBC,MAAM,EAAE,IAAI,CAACA;MACjB;IACJ,CAAC,CAAC,CAAC;EACP;EAEAhB,gBAAgB,CAACG,CAAC,EAAE;IAChB,IAAI,CAACC,SAAS,GAAG,IAAI;IACrB,IAAI,CAACa,GAAG,CAACC,SAAS,EAAE;IACpB,IAAI,CAACN,MAAM,GAAGT,CAAC,CAACgB,KAAK,GAAGhB,CAAC,CAACiB,MAAM,CAACC,UAAU;IAC3C,IAAI,CAACP,MAAM,GAAGX,CAAC,CAACmB,KAAK,GAAGnB,CAAC,CAACiB,MAAM,CAACG,SAAS;IAC1C,IAAI,CAACC,KAAK,GAAG,IAAI,CAAChC,MAAM,CAACiC,SAAS,EAAE;EACxC;EAEAvB,gBAAgB,CAACC,CAAC,EAAE;IAChB,IAAI,IAAI,CAACC,SAAS,EAAE;MAChB,IAAIsB,QAAQ,GAAGvB,CAAC,CAACgB,KAAK,GAAGhB,CAAC,CAACiB,MAAM,CAACC,UAAU;MAC5C,IAAIM,QAAQ,GAAGxB,CAAC,CAACmB,KAAK,GAAGnB,CAAC,CAACiB,MAAM,CAACG,SAAS;MAC3C,IAAI,CAACR,KAAK,GAAGW,QAAQ,GAAG,IAAI,CAACd,MAAM;MACnC,IAAI,CAACI,MAAM,GAAGW,QAAQ,GAAG,IAAI,CAACb,MAAM;MACpC,IAAI,CAACc,IAAI,CAAC,IAAI,CAAChB,MAAM,EAAE,IAAI,CAACE,MAAM,EAAE,IAAI,CAACC,KAAK,EAAE,IAAI,CAACC,MAAM,CAAC;IAChE;EACJ;EAEA,OAAOa,UAAU,CAACZ,GAAG,EAAEN,CAAC,EAAEE,CAAC,EAAEE,KAAK,EAAEC,MAAM,EAAE;IACxC;IACA;IACA;IACA;IACA;IACIC,GAAG,CAACC,SAAS,EAAE;IACfD,GAAG,CAACa,IAAI,CAACnB,CAAC,EAAEE,CAAC,EAAEE,KAAK,EAAEC,MAAM,CAAC;IAC7BC,GAAG,CAACc,IAAI,EAAE;IACVd,GAAG,CAACe,MAAM,EAAE;IAChB;EACJ;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}